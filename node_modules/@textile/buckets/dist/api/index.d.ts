import { grpc } from '@improbable-eng/grpc-web';
import { ContextInterface } from '@textile/context';
import { GrpcConnection } from '@textile/grpc-connection';
import type { AbortSignal } from 'abort-controller';
import CID from 'cids';
/**
 * PushOptions provides additional options for controlling a push to a bucket path.
 */
export interface PushOptions {
    /**
     * A callback function to use for monitoring push progress.
     */
    progress?: (num?: number) => void;
    /**
     * The bucket root path as a string, or root object. Important to set this property when
     * there is a possibility of multiple parallel pushes to a bucket. Specifying this property
     * will enforce fast-forward only updates. It not provided explicitly, the root path will
     * be fetched via an additional API call before each push.
     */
    root?: Root | string;
    /**
     * An optional abort signal to allow cancelation or aborting a bucket push.
     */
    signal?: AbortSignal;
}
export declare const AbortError: Error;
/**
 * The expected result format from pushing a path to a bucket
 */
export interface PushPathResult {
    path: {
        path: string;
        cid: CID;
        root: CID;
        remainder: string;
    };
    root: string;
}
/**
 * Response from bucket links query.
 */
export declare type Links = {
    www: string;
    ipns: string;
    url: string;
};
/**
 * @deprecated
 */
export declare type LinksObject = Links;
/**
 * Bucket root info
 */
export declare type Root = {
    key: string;
    name: string;
    path: string;
    createdAt: number;
    updatedAt: number;
    thread: string;
};
/**
 * @deprecated
 */
export declare type RootObject = Root;
export declare enum PathAccessRole {
    PATH_ACCESS_ROLE_UNSPECIFIED = 0,
    PATH_ACCESS_ROLE_READER = 1,
    PATH_ACCESS_ROLE_WRITER = 2,
    PATH_ACCESS_ROLE_ADMIN = 3
}
export declare type BuckMetadata = {
    roles: Map<string, PathAccessRole>;
    updatedAt: number;
};
/**
 * @deprecated
 */
export declare type MetadataObject = BuckMetadata;
/**
 * A bucket path item response
 */
export declare type PathItem = {
    cid: string;
    name: string;
    path: string;
    size: number;
    isDir: boolean;
    items: Array<PathItem>;
    count: number;
    metadata?: BuckMetadata;
};
/**
 * @deprecated
 */
export declare type PathItemObject = PathItem;
/**
 * A bucket list path response
 */
export declare type Path = {
    item?: PathItem;
    root?: Root;
};
/**
 * @deprecated
 */
export declare type PathObject = Path;
/**
 * ArchiveConfig is the desired state of a Cid in the Filecoin network.
 */
export interface ArchiveConfig {
    /**
     * RepFactor (ignored in Filecoin testnet) indicates the desired amount of active deals
     * with different miners to store the data. While making deals
     * the other attributes of FilConfig are considered for miner selection.
     */
    repFactor: number;
    /**
     * DealMinDuration indicates the duration to be used when making new deals.
     */
    dealMinDuration: number;
    /**
     * ExcludedMiners (ignored in Filecoin testnet) is a set of miner addresses won't be ever be selected
     *when making new deals, even if they comply to other filters.
     */
    excludedMiners: Array<string>;
    /**
     * TrustedMiners (ignored in Filecoin testnet) is a set of miner addresses which will be forcibly used
     * when making new deals. An empty/nil list disables this feature.
     */
    trustedMiners: Array<string>;
    /**
     * CountryCodes (ignored in Filecoin testnet) indicates that new deals should select miners on specific countries.
     */
    countryCodes: Array<string>;
    /**
     * Renew indicates deal-renewal configuration.
     */
    renew?: ArchiveRenew;
    /**
     * Addr is the wallet address used to store the data in filecoin
     */
    addr: string;
    /**
     * MaxPrice is the maximum price that will be spent to store the data, 0 is no max
     */
    maxPrice: number;
    /**
     *
     * FastRetrieval indicates that created deals should enable the
     * fast retrieval feature.
     */
    fastRetrieval: boolean;
    /**
     * DealStartOffset indicates how many epochs in the future impose a
     * deadline to new deals being active on-chain. This value might influence
     * if miners accept deals, since they should seal fast enough to satisfy
     * this constraint.
     */
    dealStartOffset: number;
}
/**
 * ArchiveRenew contains renew configuration for a ArchiveConfig.
 */
export interface ArchiveRenew {
    /**
     * Enabled indicates that deal-renewal is enabled for this Cid.
     */
    enabled: boolean;
    /**
     * Threshold indicates how many epochs before expiring should trigger
     * deal renewal. e.g: 100 epoch before expiring.
     */
    threshold: number;
}
/**
 * Archive status codes
 */
export declare enum StatusCode {
    STATUS_UNSPECIFIED = 0,
    STATUS_EXECUTING = 1,
    STATUS_FAILED = 2,
    STATUS_DONE = 3,
    STATUS_CANCELED = 4
}
/**
 * Response of of bucket archive status request.
 */
export declare type ArchiveStatus = {
    key: string;
    status: StatusCode;
    failedMsg: string;
};
/**
 * Metadata for each deal associated with an archive.
 */
export declare type ArchiveDealInfo = {
    proposalCid: string;
    miner: string;
};
/**
 * Response of of bucket info status request.
 */
export declare type ArchiveInfo = {
    key: string;
    cid?: string;
    deals: Array<ArchiveDealInfo>;
};
/**
 * Bucket create response
 */
export declare type CreateResponse = {
    seed: Uint8Array;
    seedCid: string;
    root?: Root;
    links?: Links;
};
/**
 * @deprecated
 */
export declare type CreateObject = CreateResponse;
/**
 * Creates a new bucket.
 * @public
 * @param name Human-readable bucket name. It is only meant to help identify a bucket in a UI and is not unique.
 * @param isPrivate encrypt the bucket contents (default `false`)
 * @param cid (optional) Bootstrap the bucket with a UnixFS Cid from the IPFS network
 * @example
 * Creates a Bucket called "app-name-files"
 * ```typescript
 * import { Buckets } from '@textile/hub'
 *
 * const create = async (buckets: Buckets) => {
 *     return buckets.create("app-name-files")
 * }
 * ```
 *
 * @internal
 */
export declare function bucketsCreate(api: GrpcConnection, name: string, isPrivate?: boolean, cid?: string, ctx?: ContextInterface): Promise<CreateResponse>;
/**
 * Returns the bucket root CID
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 *
 * @internal
 */
export declare function bucketsRoot(api: GrpcConnection, key: string, ctx?: ContextInterface): Promise<Root | undefined>;
/**
 * Returns a list of bucket links.
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 * @example
 * Generate the HTTP, IPNS, and IPFS links for a Bucket
 * ```typescript
 * import { Buckets } from '@textile/hub'
 *
 * const getLinks = async (buckets: Buckets) => {
 *    const links = buckets.links(bucketKey)
 *    return links.ipfs
 * }
 *
 * const getIpfs = async (buckets: Buckets) => {
 *    const links = buckets.links(bucketKey)
 *    return links.ipfs
 * }
 * ```
 *
 * @internal
 */
export declare function bucketsLinks(api: GrpcConnection, key: string, path: string, ctx?: ContextInterface): Promise<Links>;
/**
 * Returns a list of all bucket roots.
 * @example
 * Find an existing Bucket named "app-name-files"
 * ```typescript
 * import { Buckets } from '@textile/hub'
 *
 * const exists = async (buckets: Buckets) => {
 *     const roots = await buckets.list();
 *     return roots.find((bucket) => bucket.name ===  "app-name-files")
 * }
 * ```
 *
 * @internal
 */
export declare function bucketsList(api: GrpcConnection, ctx?: ContextInterface): Promise<Array<Root>>;
/**
 * Returns information about a bucket path.
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 * @param path A file/object (sub)-path within a bucket.
 *
 * @internal
 */
export declare function bucketsListPath(api: GrpcConnection, key: string, path: string, ctx?: ContextInterface): Promise<Path>;
/**
 * listIpfsPath returns items at a particular path in a UnixFS path living in the IPFS network.
 * @param path UnixFS path
 *
 * @internal
 */
export declare function bucketsListIpfsPath(api: GrpcConnection, path: string, ctx?: ContextInterface): Promise<PathItem | undefined>;
/**
 * Pushes a file to a bucket path.
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 * @param path A file/object (sub)-path within a bucket.
 * @param input The input file/stream/object.
 * @param opts Options to control response stream.
 * @remarks
 * This will return the resolved path and the bucket's new root path.
 * @example
 * Push a file to the root of a bucket
 * ```typescript
 * import { Buckets } from '@textile/hub'
 *
 * const pushFile = async (content: string, bucketKey: string) => {
 *    const file = { path: '/index.html', content: Buffer.from(content) }
 *    return await buckets.pushPath(bucketKey!, 'index.html', file)
 * }
 * ```
 *
 * @internal
 */
export declare function bucketsPushPath(api: GrpcConnection, key: string, path: string, input: any, opts?: PushOptions, ctx?: ContextInterface): Promise<PushPathResult>;
export declare function bucketsPushPathNode(api: GrpcConnection, key: string, path: string, input: any, opts?: PushOptions, ctx?: ContextInterface): Promise<PushPathResult>;
/**
 * Pushes a file to a bucket path.
 * @internal
 */
export declare function bucketsSetPath(api: GrpcConnection, key: string, path: string, cid: string, ctx?: ContextInterface): Promise<void>;
/**
 * Pulls the bucket path, returning the bytes of the given file.
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 * @param path A file/object (sub)-path within a bucket.
 * @param opts Options to control response stream. Currently only supports a progress function.
 *
 * @internal
 */
export declare function bucketsPullPath(api: GrpcConnection, key: string, path: string, opts?: {
    progress?: (num?: number) => void;
}, ctx?: ContextInterface): AsyncIterableIterator<Uint8Array>;
/**
 * pullIpfsPath pulls the path from a remote UnixFS dag, writing it to writer if it's a file.
 * @param path A file/object (sub)-path within a bucket.
 * @param opts Options to control response stream. Currently only supports a progress function.
 *
 * @internal
 */
export declare function bucketsPullIpfsPath(api: GrpcConnection, path: string, opts?: {
    progress?: (num?: number) => void;
}, ctx?: ContextInterface): AsyncIterableIterator<Uint8Array>;
/**
 * Removes an entire bucket. Files and directories will be unpinned.
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 *
 * @internal
 */
export declare function bucketsRemove(api: GrpcConnection, key: string, ctx?: ContextInterface): Promise<void>;
/**
 * Returns information about a bucket path.
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 * @param path A file/object (sub)-path within a bucket.
 * @param root optional to specify a root
 *
 * @internal
 */
export declare function bucketsRemovePath(api: GrpcConnection, key: string, path: string, root?: string, ctx?: ContextInterface): Promise<void>;
export declare function bucketsPushPathAccessRoles(api: GrpcConnection, key: string, path: string, roles: Map<string, PathAccessRole>, ctx?: ContextInterface): Promise<void>;
export declare function bucketsPullPathAccessRoles(api: GrpcConnection, key: string, path?: string, ctx?: ContextInterface): Promise<Map<string, 0 | 1 | 2 | 3>>;
/**
 * @internal
 */
export declare function bucketsDefaultArchiveConfig(api: GrpcConnection, key: string, ctx?: ContextInterface): Promise<ArchiveConfig>;
/**
 * @internal
 */
export declare function bucketsSetDefaultArchiveConfig(api: GrpcConnection, key: string, config: ArchiveConfig, ctx?: ContextInterface): Promise<void>;
/**
 * An object to configure options for Archive.
 */
export interface ArchiveOptions {
    /**
     * Provide a custom ArchiveConfig to override use of the default.
     */
    archiveConfig?: ArchiveConfig;
}
/**
 * archive creates a Filecoin bucket archive via Powergate.
 * @internal
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 * @param options Options that control the behavior of the bucket archive
 */
export declare function bucketsArchive(api: GrpcConnection, key: string, options?: ArchiveOptions, ctx?: ContextInterface): Promise<void>;
/**
 * archiveStatus returns the status of a Filecoin bucket archive.
 * @internal
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 */
export declare function bucketsArchiveStatus(api: GrpcConnection, key: string, ctx?: ContextInterface): Promise<ArchiveStatus>;
/**
 * archiveInfo returns info about a Filecoin bucket archive.
 * @internal
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 */
export declare function bucketsArchiveInfo(api: GrpcConnection, key: string, ctx?: ContextInterface): Promise<ArchiveInfo>;
/**
 * archiveWatch watches status events from a Filecoin bucket archive.
 * @internal
 * @param key Unique (IPNS compatible) identifier key for a bucket.
 */
export declare function bucketsArchiveWatch(api: GrpcConnection, key: string, callback: (reply?: {
    id: string | undefined;
    msg: string;
}, err?: Error) => void, ctx?: ContextInterface): Promise<() => void>;
/**
 * Raw API connected needed by Buckets CI code (compile friendly)
 * see more https://github.com/textileio/github-action-buckets
 */
export declare class BucketsGrpcClient {
    context: ContextInterface;
    serviceHost: string;
    rpcOptions: grpc.RpcOptions;
    /**
     * Creates a new gRPC client instance for accessing the Textile Buckets API.
     * @param context The context to use for interacting with the APIs. Can be modified later.
     */
    constructor(context?: ContextInterface, debug?: boolean);
    unary<R extends grpc.ProtobufMessage, T extends grpc.ProtobufMessage, M extends grpc.UnaryMethodDefinition<R, T>>(methodDescriptor: M, req: R, ctx?: ContextInterface): Promise<T>;
}
